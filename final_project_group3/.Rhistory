event = clinical$death_event)
race_fit <- surv_fit(surv_object_race ~ clinical$race_list,
data = clinical)
survplot_race = ggsurvplot(race_fit,
pval=TRUE,
ggtheme = theme(plot.margin = unit(c(1,1,1,1), "cm")),
legend = "right")
KM_plot_race = survplot_race$plot +
theme_bw() +
theme(axis.title = element_text(size=20),
axis.text = element_text(size=16),
legend.title = element_text(size=14),
legend.text = element_text(size=12))
KM_plot_race
genes <- c("TP53", "PIK3CA")
oncoplot(maf = maf_object,
genes = genes)
white_patient_barcodes <- maf_object@clinical.data$Tumor_Sample_Barcode[maf_object@clinical.data$race_list == "WHITE"]
other_patient_barcodes <- maf_object@clinical.data$Tumor_Sample_Barcode[maf_object@clinical.data$race_list != "WHITE"]
white_maf <- subsetMaf(maf = maf_object,
tsb = white_patient_barcodes)
other_maf <- subsetMaf(maf = maf_object,
tsb = other_patient_barcodes)
coOncoplot(m1 = white_maf, m2 = other_maf, m1Name = "White", m2Name = "Other", genes = genes)
race_coOncoplot
lollipopPlot2(m1 = white_maf,
m2 = other_maf,
m1_name = "White",
m2_name = "Other",
gene = "TP53")
countplot_race_clinical <- ggplot(clinical, aes(x=race_list))
countplot_race_clinical + geom_bar()
KM_plot_race = survplot_race$plot +
theme_bw() +
theme(axis.title = element_text(size=20),
axis.text = element_text(size=16),
legend.title = element_text(size=14),
legend.text = element_text(size=12))
KM_plot_race
white_patient_barcodes <- maf_object@clinical.data$Tumor_Sample_Barcode[maf_object@clinical.data$race_list == "WHITE"]
other_patient_barcodes <- maf_object@clinical.data$Tumor_Sample_Barcode[maf_object@clinical.data$race_list != "WHITE"]
white_maf <- subsetMaf(maf = maf_object,
tsb = white_patient_barcodes)
other_maf <- subsetMaf(maf = maf_object,
tsb = other_patient_barcodes)
maf_object@clinical.data$overall_survival_status <- ifelse(maf_object@clinical.data$vital_status == "Dead", TRUE, FALSE)
maf_object@clinical.data$survival_time <- ifelse(is.na(maf_object@clinical.data$days_to_death), maf_object@clinical.data$days_to_last_followup, maf_object@clinical.data$days_to_death)
mafSurvival(maf = maf_object,
genes = "TP53",
time = "survival_time",
Status = "overall_survival_status",
isTCGA = TRUE)
coOncoplot(m1 = white_maf, m2 = other_maf, m1Name = "White", m2Name = "Other", genes = genes)
countplot_race_clinical <- ggplot(clinical, aes(x=race_list))
countplot_race_clinical + geom_bar()
KM_plot_race = survplot_race$plot +
theme_bw() +
theme(axis.title = element_text(size=20),
axis.text = element_text(size=16),
legend.title = element_text(size=14),
legend.text = element_text(size=12))
KM_plot_race
KM_plot_race = survplot_race$plot +
theme_bw() +
theme(axis.title = element_text(size=20),
axis.text = element_text(size=16),
legend.title = element_text(size=14),
legend.text = element_text(size=12))
KM_plot_race
genes <- c("TP53", "PIK3CA")
oncoplot(maf = maf_object,
genes = genes)
white_patient_barcodes <- maf_object@clinical.data$Tumor_Sample_Barcode[maf_object@clinical.data$race_list == "WHITE"]
other_patient_barcodes <- maf_object@clinical.data$Tumor_Sample_Barcode[maf_object@clinical.data$race_list != "WHITE"]
# subset the overall MAF with the divisions we just created
white_maf <- subsetMaf(maf = maf_object,
tsb = white_patient_barcodes)
other_maf <- subsetMaf(maf = maf_object,
tsb = other_patient_barcodes)
coOncoplot(m1 = white_maf, m2 = other_maf, m1Name = "White", m2Name = "Other", genes = genes)
lollipopPlot2(m1 = white_maf,
m2 = other_maf,
m1_name = "White",
m2_name = "Other",
gene = "TP53")
lollipopPlot2(m1 = white_maf,
m2 = other_maf,
m1_name = "White",
m2_name = "Other",
gene = "PIK3CA")
mafSurvival(maf = maf_object,
genes = "TP53",
time = "survival_time",
Status = "overall_survival_status",
isTCGA = TRUE)
mafSurvival(maf = maf_object,
genes = "PIK3CA",
time = "survival_time",
Status = "overall_survival_status",
isTCGA = TRUE)
dev.off()
mafSurvival(maf = maf_object,
genes = "PIK3CA",
time = "survival_time",
Status = "overall_survival_status",
isTCGA = TRUE)
# Mid-Semester Project
# QBIO 490 Fall 2022
# Brandon Ye
install.packages("survival")
install.packages("survminer")
install.packages("ggplot2")
install.packages("maftools")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.15")
knitr::opts_knit$set(root.dir = normalizePath("/Users/brandonye/Desktop/fa22/QBIO 490/fa22_qbio_490_brandon/midsemester_project_ye/outputs"))
# query for clinical data
clinical_query <- GDCquery(project = "TCGA-BRCA", data.category = "Clinical", file.type = "xml")
library(BiocManager)
library(TCGAbiolinks)
library(maftools)
library(survival)
library(survminer)
library(ggplot2)
knitr::opts_knit$set(root.dir = normalizePath("/Users/brandonye/Desktop/fa22/QBIO 490/fa22_qbio_490_brandon/midsemester_project_ye/outputs"))
# query for clinical data
clinical_query <- GDCquery(project = "TCGA-BRCA", data.category = "Clinical", file.type = "xml")
GDCdownload(clinical_query)
clinical <- GDCprepare_clinic(query = clinical_query, clinical.info = "patient")
# prepare (rename) column names of clinical for our maf query
colnames(clinical)[colnames(clinical) == "bcr_patient_barcode" ] <- "Tumor_Sample_Barcode"
# prepare clinical.drug and clinical.rad data
clinical.drug <- GDCprepare_clinic(query = clinical_query, clinical.info = "drug")
clinical.rad <- GDCprepare_clinic(query = clinical_query, clinical.info = "radiation")
# query for MAF data
maf_query <- GDCquery(
project = "TCGA-BRCA",
data.category = "Simple Nucleotide Variation",
access = "open",
data.type = "Masked Somatic Mutation",
workflow.type = "Aliquot Ensemble Somatic Variant Merging and Masking")
GDCdownload(maf_query)
maf <- GDCprepare(maf_query)
maf_object <- read.maf(maf = maf,
clinicalData = clinical,
isTCGA = TRUE)
# the aim of this project is to determine how race affects survival in breast cancer patients, with a focus on differential mutation rates in TP53 and PIK3CA by race, and how these rate ultimately affect survival outcomes
# create a clinical survival time column for KM analysis
# if days_to_death is not NA, that is survival time
# if days_to_death is NA, days_to_last_followup becomes the best estimate
clinical$survival_time <- ifelse(is.na(clinical$days_to_death), clinical$days_to_last_followup, clinical$days_to_death)
# create a death event column; T if death recorded, F if otherwise
clinical$death_event <- ifelse(clinical$vital_status == "Dead", T, F)
# data cleaning for KM visualization
unique(clinical$race_list) # the categories that do exist look to be clean, however, there are many patients with no race information
clinical$race_list <- sub("^$", "OTHER", clinical$race_list) # replace patients who have no race information with race "OTHER"
# start with a simple countplot to visualize the distribution of the clinical dataset by race
# AMERICAN INDIAN OR ALASKA NATIVE                            ASIAN        BLACK OR AFRICAN AMERICAN
#                                1                               62                              201
#                            OTHER                            WHITE
#                              109                              801
# jpeg("/Users/brandonye/Desktop/fa22/QBIO 490/fa22_qbio_490_brandon/midsemester_project_ye/outputs/countplot_race_clinical.jpeg")
countplot_race_clinical <- ggplot(clinical, aes(x=race_list))
countplot_race_clinical + geom_bar()
# dev.off()
# plot a KM to depict differential survival by race
# create a survival object for race
surv_object_race <- Surv(time = clinical$survival_time,
event = clinical$death_event)
# Create a fit object
# Plot the surv_object against the race
race_fit <- surv_fit(surv_object_race ~ clinical$race_list,
data = clinical)
# plot formatting
survplot_race = ggsurvplot(race_fit,
pval=TRUE,
ggtheme = theme(plot.margin = unit(c(1,1,1,1), "cm")),
legend = "right")
# finalize KM plot
# jpeg("/Users/brandonye/Desktop/fa22/QBIO 490/fa22_qbio_490_brandon/midsemester_project_ye/outputs/KM_plot_race.jpeg")
KM_plot_race = survplot_race$plot +
theme_bw() +
theme(axis.title = element_text(size=20),
axis.text = element_text(size=16),
legend.title = element_text(size=14),
legend.text = element_text(size=12))
KM_plot_race
# dev.off()
# TP53 and PIK3CA are the commonly mutated gene in BRCA patients, and are understood to possibly have antagonistic effects on survival
# Here, we move from clinical to MAF data and investigate how, if at all, race is associated with mutation rates in TP53 and PIK3CA
# a basic oncoplot for TP53 and PIK3CA
# jpeg("/Users/brandonye/Desktop/fa22/QBIO 490/fa22_qbio_490_brandon/midsemester_project_ye/outputs/TP53_PIK3CA_oncoplot.jpeg")
genes <- c("TP53", "PIK3CA")
oncoplot(maf = maf_object,
genes = genes)
# dev.off()
# we can use a CoOncoplot to visualize the differential distribution in these two genes by race
# to do so, we need to subset our maf into separate sections by race
# because CoOncoplots only allow two plots to displayed side by side, we will distinguish race by white (majority class) versus non-white (minority class)
# unique(maf_object@clinical.data$race_list) # WHITE, ASIAN, AMERICAN INDIAN OR ALASKA NATIVE, BLACK OR AFRICAN AMERICAN
white_patient_barcodes <- maf_object@clinical.data$Tumor_Sample_Barcode[maf_object@clinical.data$race_list == "WHITE"]
other_patient_barcodes <- maf_object@clinical.data$Tumor_Sample_Barcode[maf_object@clinical.data$race_list != "WHITE"]
# subset the overall MAF with the divisions we just created
white_maf <- subsetMaf(maf = maf_object,
tsb = white_patient_barcodes)
other_maf <- subsetMaf(maf = maf_object,
tsb = other_patient_barcodes)
# plot using coOncoplot()
# whites have a lower mutation rate in TP53, and a higher mutation rate in PIK3CA
# jpeg("/Users/brandonye/Desktop/fa22/QBIO 490/fa22_qbio_490_brandon/midsemester_project_ye/outputs/race_coOncoplot.jpeg")
coOncoplot(m1 = white_maf, m2 = other_maf, m1Name = "White", m2Name = "Other", genes = genes)
# dev.off()
# Co-lollipop plots are useful because they can depict mutations at the genome level
# is the differential mutation rate in TP53 and PIK3CA noticeable on the genome level?
# jpeg("/Users/brandonye/Desktop/fa22/QBIO 490/fa22_qbio_490_brandon/midsemester_project_ye/outputs/TP53_race_coLollipop.jpeg")
lollipopPlot2(m1 = white_maf,
m2 = other_maf,
m1_name = "White",
m2_name = "Other",
gene = "TP53")
# dev.off()
# jpeg("/Users/brandonye/Desktop/fa22/QBIO 490/fa22_qbio_490_brandon/midsemester_project_ye/outputs/PIK3CA_race_coLollipop.jpeg")
lollipopPlot2(m1 = white_maf,
m2 = other_maf,
m1_name = "White",
m2_name = "Other",
gene = "PIK3CA")
# dev.off()
# the differential mutation rate in TP53 and PIK3CA seem to be unnoticeable on the genome level
# the final analysis will involve determining whether or not mutations in each gene affects survival to a significant extent
# recreate the overall survival status and survival time columns for the mafSurvival plots
maf_object@clinical.data$overall_survival_status <- ifelse(maf_object@clinical.data$vital_status == "Dead", TRUE, FALSE)
maf_object@clinical.data$survival_time <- ifelse(is.na(maf_object@clinical.data$days_to_death), maf_object@clinical.data$days_to_last_followup, maf_object@clinical.data$days_to_death)
# Kaplan Meier mutated/non-mutated for TP53
# jpeg("/Users/brandonye/Desktop/fa22/QBIO 490/fa22_qbio_490_brandon/midsemester_project_ye/outputs/TP53_mafSurvival.jpeg")
mafSurvival(maf = maf_object,
genes = "TP53",
time = "survival_time",
Status = "overall_survival_status",
isTCGA = TRUE)
# dev.off()
# Kaplan Meier mutated/non-mutated for PIK3CA
# jpeg("/Users/brandonye/Desktop/fa22/QBIO 490/fa22_qbio_490_brandon/midsemester_project_ye/outputs/PIK3CA_mafSurvival.jpeg")
mafSurvival(maf = maf_object,
genes = "PIK3CA",
time = "survival_time",
Status = "overall_survival_status",
isTCGA = TRUE)
# dev.off()
lollipopPlot2(m1 = white_maf,
m2 = other_maf,
m1_name = "White",
m2_name = "Other",
gene = "PIK3CA")
# merge clinical and clinical.rad
unique(clinical.rad$radiation_type)
# merge clinical and clinical.rad
unique(clinical.drug$therapy_types)
clinical_and_drug <- merge(clinical, clinical.drug, by = "Tumor_Sample_Barcode", all.x=TRUE, all.y=TRUE)
colnames(clinical)[colnames(clinical) == "Tumor_Sample_Barcode" ] <- "bcr_patient_barcode" # temp rever tumor sample barcode column name to merge
clinical_and_drug <- merge(clinical, clinical.drug, by = "bcr_patient_barcode", all.x=TRUE, all.y=TRUE)
colnames(clinical)[colnames(clinical) == "bcr_patient_barcode" ] <- "Tumor_Sample_Barcode"
View(clinical)
View(clinical_and_drug)
clinical_and_drug$therapy_types <- ifelse(clinical_and_drug$therapy_types == "Chemotherapy", "Chemotherapy",
ifelse(clinical_and_drug$therapy_types == "Hormone Therapy", "Hormone Therapy",
ifelse(clinical_and_drug$therapy_types == "Vaccine", "Vaccine",
ifelse(clinical_and_drug$therapy_types == "Immunotherapy", "Immunotherapy",
ifelse(clinical_and_drug$therapy_types == "Ancillary", "Ancillary", "Other")))))
unique(clinical_and_drug$therapy_types) #
clinical_and_drug$therapy_types <- ifelse(clinical_and_drug$therapy_types == "Chemotherapy", "Chemotherapy",
ifelse(clinical_and_drug$therapy_types == "Hormone Therapy", "Hormone Therapy",
ifelse(clinical_and_drug$therapy_types == "Vaccine", "Vaccine",
ifelse(clinical_and_drug$therapy_types == "Immunotherapy", "Immunotherapy",
ifelse(clinical_and_drug$therapy_types == "Ancillary", "Ancillary",
ifelse(is.na(clinical_and_drug$therapy_types), "Other", "Other"))))))
unique(clinical_and_drug$therapy_types) #
colnames(clinical)[colnames(clinical) == "Tumor_Sample_Barcode" ] <- "bcr_patient_barcode" # temp rever tumor sample barcode column name to merge
clinical_and_drug <- merge(clinical, clinical.drug, by = "bcr_patient_barcode", all.x=TRUE, all.y=TRUE)
colnames(clinical)[colnames(clinical) == "bcr_patient_barcode" ] <- "Tumor_Sample_Barcode"
unique(clinical_and_drug$therapy_types) # lots of "other" types which we should combine into one
clinical_and_drug$therapy_types <- ifelse(clinical_and_drug$therapy_types == "Chemotherapy", "Chemotherapy",
ifelse(clinical_and_drug$therapy_types == "Hormone Therapy", "Hormone Therapy",
ifelse(clinical_and_drug$therapy_types == "Vaccine", "Vaccine",
ifelse(clinical_and_drug$therapy_types == "Immunotherapy", "Immunotherapy",
ifelse(clinical_and_drug$therapy_types == "Ancillary", "Ancillary", "Other")))))
barplot_race_therapy <- ggplot(clinical_and_drug, aes(x=race_list, y=therapy_types))
barplot_race_therapy + geom_bar()
barplot_race_therapy <- ggplot(clinical_and_drug, aes(x=race_list, y=therapy_types))
barplot_race_therapy + geom_bar(stat="identity")
barplot_race_therapy <- ggplot(clinical_and_drug, aes(x=race_list, y=values, fill=therapy_types))
barplot_race_therapy + geom_bar(stat="identity",
position="dodge")
barplot_race_therapy <- ggplot(clinical_and_drug, aes(x=race_list, fill=therapy_types))
barplot_race_therapy + geom_bar(stat="identity",
position="dodge")
barplot_race_therapy <- ggplot(clinical_and_drug, aes(x=race_list, fill=clinical$therapy_types)) + geom_bar(position="dodge")
barplot_race_therapy <- ggplot(clinical_and_drug, aes(x=race_list, fill=therapy_types)) + geom_bar(position="dodge")
unique(clinical_and_drug$therapy_types) # lots of "other" types which we should combine into one
barplot_race_therapy <- ggplot(clinical, aes(x=clinical_and_drug$race_list, fill=clinical_and_drug$therapy_types)) + geom_bar(position="dodge") #construct histogram
barplot_race_therapy + ggtitle("") + xlab("") + ylab("Count") #set axis titles
barplot_race_therapy <- ggplot(clinical_and_drug, aes(x=clinical_and_drug$race_list, fill=clinical_and_drug$therapy_types)) + geom_bar(position="dodge") #construct histogram
barplot_race_therapy + ggtitle("") + xlab("") + ylab("Count") #set axis titles
barplot_race_therapy + scale_fill_discrete(name="therapy types", labels = c("Chemotherapy", "Hormone Therapy", "Immunotherapy", "Vaccine", "Ancillary", "Other", "NA"))
barplot_race_therapy <- ggplot(clinical_and_drug, aes(x=race_list, fill=therapy_types)) + geom_bar(position="dodge") #construct histogram
barplot_race_therapy + ggtitle("") + xlab("") + ylab("Count") #set axis titles
barplot_race_therapy + scale_fill_discrete(name="therapy types", labels = c("Chemotherapy", "Hormone Therapy", "Immunotherapy", "Vaccine", "Ancillary", "Other", "NA"))
data(mtcars)
my_table <- mtcars
shape(mtcars)
dim(my_table)
my_table$ypg <- my_table$mpg*1760
View(my_table)
mean(my_table$ypg)
View(mtcars)
View(mtcars)
View(mtcars)
my_table(my_table$mpg > 25 && mytable$gear ==  4)
which(my_table$mpg > 25 & my_table$gear == 4)
list(which(my_table$mpg > 25 & my_table$gear == 4))
rows(which(my_table$mpg > 25 & my_table$gear == 4))
row(which(my_table$mpg > 25 & my_table$gear == 4))
mean(my_table$mpg)
my_table[my_table$mpg > 25 & my_table$gear == 4]
my_table[my_table$mpg > 25 & my_table$gear == 4,]
---
title: "R Notebook"
if (!require(TAF)) {install.packages("TAF")}
library(TAF)
setwd("C:/Users/ac361/Desktop/QBIO_490/qbio_490_avinash")
if (!require(TAF)) {install.packages("TAF")}
library(TAF)
setwd("/Users/brandonye/Desktop/fa22/QBIO 490/fa22_qbio_490_brandon")
mkdir("/Users/brandonye/Desktop/fa22/QBIO 490/fa22_qbio_490_brandon/final_project_group3")
setwd("/Users/brandonye/Desktop/fa22/QBIO 490/fa22_qbio_490_brandon/final_project_group3")
install.packages("TCGAbiolinks")
install.packages("maftools")
install.packages("BiocManager")
install.packages("survival")
install.packages("survminer")
install.packages("ggplot2")
install.packages("vioplot")
install.packages("aplpack")
library("TCGAbiolinks")
library("maftools")
library("BiocManager")
library("survival")
library("survminer")
library("ggplot2")
library("vioplot")
library("aplpack")
if (!require(TAF)) {install.packages("TAF")}
library(TAF)
setwd("/Users/brandonye/Desktop/fa22/QBIO 490/fa22_qbio_490_brandon")
mkdir("/Users/brandonye/Desktop/fa22/QBIO 490/fa22_qbio_490_brandon/final_project_group3")
setwd("/Users/brandonye/Desktop/fa22/QBIO 490/fa22_qbio_490_brandon/final_project_group3")
install.packages("TCGAbiolinks")
install.packages("maftools")
install.packages("BiocManager")
install.packages("survival")
install.packages("survminer")
install.packages("ggplot2")
#install.packages("vioplot")
#install.packages("aplpack")
library("TCGAbiolinks")
library("maftools")
library("BiocManager")
library("survival")
library("survminer")
library("ggplot2")
#library("vioplot")
#library("aplpack")
clinical_query <- GDCquery(project = "TCGA-LUAD", data.category = "Clinical", file.type = "xml")
GDCdownload(clinical_query)
clinical <- GDCprepare_clinic(query = clinical_query, clinical.info = "patient")
clinical.drug <- GDCprepare_clinic(query = clinical_query, clinical.info = "drug")
clinical.rad <- GDCprepare_clinic(query = clinical_query, clinical.info = "radiation")
colnames(clinical)[ colnames(clinical) == "bcr_patient_barcode" ] <- "Tumor_Sample_Barcode"
#filters N/A values from dataframe
clinical_filtered = clinical[!is.na(clinical$year_of_initial_pathologic_diagnosis), ]
#creates smoking_status column in dataframe based on whether there is data on year of first smoke
clinical_filtered$smoking_status =
ifelse(is.na(clinical_filtered$year_of_tobacco_smoking_onset), FALSE, TRUE)
#graphs boxplot of age at LA diagnosis based on smoking status
jpeg("boxplot.jpg")
par(mar=c(4,4,4,4))
boxplot(clinical_filtered$age_at_initial_pathologic_diagnosis ~ clinical_filtered$smoking_status, xlab = "Smoking Status", ylab = "Age of Diagnosis", main = "Age of Lung Adenocarcinoma Diagnosis\nBased on Smoking Status")
dev.off()
#graphs histogram of difference in years from first smoke to LA diagnosis
jpeg("histogram.jpg")
par(mar=c(4,4,4,4))
hist(clinical_filtered$year_of_initial_pathologic_diagnosis -
clinical_filtered$year_of_tobacco_smoking_onset, xlab = "Years", ylab = "Frequency", main = "Years from Start of Smoking to\nInitial Lung Adenocarcinoma Diagnosis")
dev.off()
#download all maf files and queried in
maf_query <- GDCquery(
project = "TCGA-LUAD", data.category = "Simple Nucleotide Variation", access = "open",
data.type = "Masked Somatic Mutation", workflow.type = "Aliquot Ensemble Somatic Variant Merging and Masking"
)
GDCdownload(maf_query)
maf <- GDCprepare(maf_query) # as long as it runs, ignore any errors
colnames(clinical)[ colnames(clinical) == "bcr_patient_barcode" ] <- "Tumor_Sample_Barcode"
maf_object <- read.maf(maf = maf, clinicalData = clinical, isTCGA = TRUE)
#creating stratification to determine smoking status
clinical$smoking_status = ifelse(is.na(clinical$year_of_tobacco_smoking_onset), FALSE, TRUE)
#dataframe just with smoking patients
clinical_smoking <- clinical[clinical$smoking_status == TRUE,]
#stratfication to determine survival time and death status, copied onto smoking population
clinical_smoking$survivaltime = ifelse(is.na(clinical_smoking$days_to_death), clinical_smoking$days_to_last_followup, clinical_smoking$days_to_death)
clinical_smoking$deathstatus = ifelse(clinical_smoking$vital_status == "Dead", TRUE, FALSE)
#Kaplan Meier Survival Analysis of Gender within Smoking Patients
survival_object <- Surv(time = clinical_smoking$survivaltime, event = clinical_smoking$deathstatus)
gender_sort <- surv_fit(survival_object ~ clinical_smoking$gender, data = clinical_smoking)
jpeg("survival_sex")
ggsurvplot(gender_sort, data = clinical_smoking, surv.median.line = "hv", legend.title = "Gender", legend.labs = c("Men", "Women"), pval = TRUE, conf.int = TRUE, risk.table = TRUE, tables.height = 0.2, tables.theme = clean_theme(), ggtheme = theme_gray())
dev.off()
#stratfication to determine survival time and death status, copied onto smoking population
clinical$survivaltime = ifelse(is.na(clinical$days_to_death), clinical$days_to_last_followup, clinical$days_to_death)
clinical$deathstatus = ifelse(clinical$vital_status == "Dead", TRUE, FALSE)
#Kaplan Meier Survival Analysis of Smoking Patients
survival_object <- Surv(time = clinical$survivaltime, event = clinical$deathstatus)
smoking_sort <- surv_fit(survival_object ~ clinical$smoking_status, data = clinical)
jpeg("survival_smoking")
ggsurvplot(smoking_sort, data = clinical, surv.median.line = "hv", legend.title = "Smoking Status", legend.labs = c("TRUE", "FALSE"), pval = TRUE, conf.int = TRUE, risk.table = TRUE, tables.height = 0.2, tables.theme = clean_theme(), ggtheme = theme_gray())
dev.off()
#read in updated maf object
maf_object <- read.maf(maf = maf, clinicalData = clinical, isTCGA = TRUE)
#draw oncoplot with smoking patients
jpeg("oncoplot")
oncoplot(maf = maf_object, top = 10, clinicalFeatures = "smoking_status")
dev.off()
#cleaning maf data to differentiate between smoking positive and smoking negative patient barcodes
smoking_positive_barcodes <- maf_object@clinical.data$Tumor_Sample_Barcode[maf_object@clinical.data$smoking_status == TRUE]
smoking_positive_maf <- subsetMaf(maf= maf_object, tsb = smoking_positive_barcodes)
smoking_negative_barcodes <- maf_object@clinical.data$Tumor_Sample_Barcode[maf_object@clinical.data$smoking_status == FALSE]
smoking_negative_maf <- subsetMaf(maf = maf_object, tsb = smoking_negative_barcodes)
#draw cooncoplot comparing smokers and nonsmoker gene mutation frequencies
jpeg("cooncoplot_smoking")
coOncoplot(m1 = smoking_positive_maf, m2 = smoking_negative_maf, m1Name = "Smoker", m2Name = "Non-Smoker")
dev.off()
#map gene locus of the gene with the greatest differential mutation rate within the top 5 most mutated genes, which in this case is TTN
jpeg("lollipop_smoking")
lollipopPlot2(m1 = smoking_positive_maf, m2 = smoking_negative_maf, m1_name = "Smoker", m2_name = "Non-Smoker", gene = "TTN")
dev.off()
#secondary analysis of sex within smoking positive: sorting patient sex by barcode
male_barcodes <- maf_object@clinical.data$Tumor_Sample_Barcode[maf_object@clinical.data$gender == "MALE"]
male_maf <- subsetMaf(maf= smoking_positive_maf, tsb = male_barcodes)
female_barcodes <- maf_object@clinical.data$Tumor_Sample_Barcode[maf_object@clinical.data$gender == "FEMALE"]
female_maf <- subsetMaf(maf = smoking_positive_maf, tsb = female_barcodes)
#draw cooncoplot to compare rates of mutation for top 5 genes between sex stratification of smoking cohort
jpeg("cooncoplot_sex")
coOncoplot(m1 = male_maf, m2 = female_maf, m1Name = "Male", m2Name = "Female")
dev.off()
#lollipop plot to map gene locus of CSMD3, which had the greatest differential mutation rate within the sex stratification of the smoking cohort
jpeg("lollipop_sex")
lollipopPlot2(m1 = male_maf, m2 = female_maf, m1_name = "Male", m2_name = "Female", gene = "CSMD3")
dev.off()
#download and query of RNA data
rna_query <- GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "STAR - Counts")
GDCdownload(rna_query)
rna_se <- GDCprepare(rna_query)
#masks on RNA data to create rna counts, rna genes, and rna clinical data frames for analysis
age_mask <-  is.na(rna_se@colData$age_at_index)
rna_counts <- rna_se@assays@data$unstranded[, !age_mask]
rna_genes <- rna_se@rowRanges@elementMetadata
rna_genes <- as.data.frame(rna_genes)
rna_clinical <-  rna_se@colData[!age_mask, ]
#masks for each of the highest frquency gene mutations within the TCGA-LUAD database
TP53_mask <- ifelse(rna_genes$gene_name == "TP53", TRUE, FALSE)
TP53_counts <- as.numeric(rna_counts[TP53_mask, ])
KRAS_mask <- ifelse(rna_genes$gene_name == "KRAS", TRUE, FALSE)
KRAS_counts <- as.numeric(rna_counts[KRAS_mask, ])
STK11_mask <- ifelse(rna_genes$gene_name == "STK11", TRUE, FALSE)
STK11_counts <- as.numeric(rna_counts[STK11_mask, ])
EGFR_mask <- ifelse(rna_genes$gene_name == "EGFR", TRUE, FALSE)
EGFR_counts <- as.numeric(rna_counts[EGFR_mask, ])
LRP1B_mask <- ifelse(rna_genes$gene_name == "LRP1B", TRUE, FALSE)
LRP1B_counts <- as.numeric(rna_counts[LRP1B_mask, ])
CSMD3_mask <- ifelse(rna_genes$gene_name == "CSMD3", TRUE, FALSE)
CSMD3_counts <- as.numeric(rna_counts[CSMD3_mask, ])
TTN_mask <- ifelse(rna_genes$gene_name == "TTN", TRUE, FALSE)
TTN_counts <- as.numeric(rna_counts[TTN_mask, ])
MUC16_mask <- ifelse(rna_genes$gene_name == "MUC16", TRUE, FALSE)
MUC16_counts <- as.numeric(rna_counts[MUC16_mask, ])
RYR2_mask <- ifelse(rna_genes$gene_name == "RYR2", TRUE, FALSE)
RYR2_counts <- as.numeric(rna_counts[RYR2_mask, ])
#sorting data and survival data to determine survival and smoking status within RNA data
geneABCD_counts <- data.frame(TP53_counts, KRAS_counts, STK11_counts, EGFR_counts, LRP1B_counts, TTN_counts, MUC16_counts, CSMD3_counts, RYR2_counts)
colnames(geneABCD_counts) <- c("TP53", "KRAS", "STK11", "EGFR", "LRP1B", "TTN", "MUC16", "CSMD3", "RYR2")
five_yr_death <- ifelse(rna_clinical$days_to_death == "NA", NA, ifelse(rna_clinical$days_to_death > 365.25*5, TRUE, FALSE))
five_yr_death_and_followup <- ifelse(is.na(five_yr_death), ifelse(rna_clinical$days_to_last_follow_up > 365.25*5, TRUE, FALSE), five_yr_death)
rna_clinical$five_year_surv <- five_yr_death_and_followup
smoking_status <- ifelse(rna_clinical$years_smoked == "NA", FALSE, TRUE)
rna_clinical$smoking_status <- ifelse(is.na(rna_clinical$years_smoked), FALSE, TRUE)
# these lines set up a clustering color scheme for our plot, chose smoking status from rna_clinical to cluster based on
cols <- character(nrow(rna_clinical))
cols[rna_clinical$smoking_status == TRUE] <- "blue"
cols[rna_clinical$smoking_status == FALSE] <- "red"
# draftsman plot code
jpeg("draftsman")
pairs(geneABCD_counts, col = cols, lower.panel=NULL)
dev.off()
install.packages("TCGAbiolinks")
install.packages("maftools")
install.packages("BiocManager")
install.packages("survival")
install.packages("survminer")
install.packages("ggplot2")
