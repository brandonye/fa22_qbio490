{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0331b832",
   "metadata": {},
   "outputs": [],
   "source": [
    "# set working directory\n",
    "import os\n",
    "path = \"/Users/brandonye/Desktop/fa22/QBIO 490/fa22_qbio_490_brandon/final_project_group3/outputs\"\n",
    "try:\n",
    "    os.makedirs(path)\n",
    "except FileExistsError:\n",
    "    os.chdir(path)\n",
    "\n",
    "#imports necessary packages\n",
    "import cptac\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "from matplotlib import pyplot as plt\n",
    "from scipy import stats\n",
    "\n",
    "# downloads the Luad dataset\n",
    "cptac.download(dataset=\"LUAD\")\n",
    "luad = cptac.Luad()\n",
    "\n",
    "# extracts data\n",
    "#clinical_data = luad.get_clinical()\n",
    "transcriptomic_data = luad.get_transcriptomics()\n",
    "protein_data = luad.get_proteomics()\n",
    "protein_data.columns = protein_data.columns.get_level_values(0) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "82daafbe",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Subsets dataframes to only include genesthat are in both the transcriptomic and proteomic data\n",
    "shared_rna_prot = np.intersect1d(transcriptomic_data.columns, protein_data.columns)\n",
    "rna_shared = transcriptomic_data.loc[:, shared_rna_prot]\n",
    "prot_shared = protein_data.loc[:, shared_rna_prot]\n",
    "\n",
    "#outputs number of patients\n",
    "print(prot_shared.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9050c706",
   "metadata": {},
   "outputs": [],
   "source": [
    "genelist = [\"TP53\", \"KRAS\", \"STK11\", \"EGFR\", \"LRP1B\", \"TTN\", \"MUC16\", \"RYR2\"]\n",
    "#sets list of most communly mutated genes in LA patients\n",
    "\n",
    "geneindexlist = []\n",
    "\n",
    "#generates a list with indices for desired genes, then finds the corresponding gene data\n",
    "for gene in genelist:\n",
    "    geneindexlist.append(protein_data.columns.get_loc(gene))\n",
    "ncomparisons = len(geneindexlist)\n",
    "gene_names = protein_data.columns[geneindexlist]\n",
    "\n",
    "#declares dataframe\n",
    "corr_df = pd.DataFrame(np.ndarray(shape=(ncomparisons, ncomparisons), dtype=np.float16),\n",
    "                      index = gene_names,\n",
    "                      columns = gene_names)\n",
    "\n",
    "#generates dataframe with p-values\n",
    "for g1 in gene_names:\n",
    "    for g2 in gene_names:\n",
    "        #calculates correlations\n",
    "        corr, pval = stats.spearmanr(rna_shared[g1], prot_shared[g2], nan_policy=\"omit\")\n",
    "        corr_df.loc[g1, g2] = corr\n",
    "\n",
    "#plots the heat map\n",
    "plot = sns.heatmap(\n",
    "    corr_df,\n",
    "    cmap='mako',\n",
    ")\n",
    "plot.set_xlabel('Protein', fontsize=10)\n",
    "plot.set_ylabel('RNA', fontsize=10)\n",
    "plt.title('Correlations of Protein/RNA Expression for Gene Pairings')\n",
    "plt.savefig('heatmap_RNA_Protein.jpg')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "394fcd6d",
   "metadata": {},
   "outputs": [],
   "source": [
    "genelist = [\"TP53\", \"KRAS\", \"STK11\", \"EGFR\", \"LRP1B\", \"TTN\", \"MUC16\", \"RYR2\"]\n",
    "#sets list of most communly mutated genes in LA patients\n",
    "\n",
    "geneindexlist = []\n",
    "\n",
    "#generates a list with indices for desired genes, then finds the corresponding gene data\n",
    "for gene in genelist:\n",
    "    geneindexlist.append(protein_data.columns.get_loc(gene))\n",
    "ncomparisons = len(geneindexlist)\n",
    "gene_names = protein_data.columns[geneindexlist]\n",
    "\n",
    "#declares dataframe\n",
    "corr_df = pd.DataFrame(np.ndarray(shape=(ncomparisons, ncomparisons), dtype=np.float16),\n",
    "                      index = gene_names,\n",
    "                      columns = gene_names)\n",
    "\n",
    "#generates dataframe with p-values\n",
    "for g1 in gene_names:\n",
    "    for g2 in gene_names:\n",
    "        corr, pval = stats.spearmanr(rna_shared[g1], rna_shared[g2], nan_policy=\"omit\")\n",
    "        corr_df.loc[g1, g2] = corr\n",
    "\n",
    "#plots the heat map\n",
    "plot = sns.heatmap(\n",
    "    corr_df,\n",
    "    cmap='mako',\n",
    ")\n",
    "plot.set_xlabel('RNA 1', fontsize=10)\n",
    "plot.set_ylabel('RNA 2', fontsize=10)\n",
    "plt.title('Correlations of RNA/RNA Expression for Gene Pairings')\n",
    "plt.savefig('heatmap_RNA_RNA.jpg')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "967c5817",
   "metadata": {},
   "outputs": [],
   "source": [
    "genelist = [\"TP53\", \"KRAS\", \"STK11\", \"EGFR\", \"LRP1B\", \"TTN\", \"MUC16\", \"RYR2\"]\n",
    "#sets list of most communly mutated genes in LA patients\n",
    "\n",
    "geneindexlist = []\n",
    "\n",
    "#generates a list with indices for desired genes, then finds the corresponding gene data\n",
    "for gene in genelist:\n",
    "    geneindexlist.append(protein_data.columns.get_loc(gene))\n",
    "ncomparisons = len(geneindexlist)\n",
    "gene_names = protein_data.columns[geneindexlist]\n",
    "\n",
    "#declares dataframe\n",
    "corr_df = pd.DataFrame(np.ndarray(shape=(ncomparisons, ncomparisons), dtype=np.float16),\n",
    "                      index = gene_names,\n",
    "                      columns = gene_names)\n",
    "\n",
    "#generates dataframe with p-values\n",
    "for g1 in gene_names:\n",
    "    for g2 in gene_names:\n",
    "        corr, pval = stats.spearmanr(prot_shared[g1], prot_shared[g2], nan_policy=\"omit\")\n",
    "        corr_df.loc[g1, g2] = corr\n",
    "\n",
    "#plots the heat map\n",
    "plot = sns.heatmap(\n",
    "    corr_df,\n",
    "    cmap='mako',\n",
    ")\n",
    "plot.set_xlabel('Protein 1', fontsize=10)\n",
    "plot.set_ylabel('Protein 2', fontsize=10)\n",
    "plt.title('Correlations of Protein/Protein Expression for Gene Pairings')\n",
    "plt.savefig('heatmap_Protein_Protein.jpg')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "07d748f7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
