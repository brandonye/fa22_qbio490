knitr::opts_knit$set(root.dir = normalizePath("/PATH/TO/DIRECTORY"))
data(attenu) # peak earthquake accelerations measured at various observation sites
data(iris) # various measurements for flowers of different species
attenu_station_null <- is.na(attenu$station)
attenu_station_null <- is.na(attenu$station)
print(attenu_station_null)
na_boolean_mask <- is.na(attenu$station)
print(na_boolean_mask)
sum_mask <- sum(na_boolean_mask)
print(sum_mask)
mask <- na_boolean_mask
attenu_cleaned <- attenu[mask, ]
attenu_cleaned$station
View(attenu_cleaned)
View(attenu_cleaned)
View(attenu)
View(attenu)
mask <- na_boolean_mask
attenu_cleaned <- attenu[!mask, ]
View(attenu_cleaned)
View(attenu_cleaned)
attenu_cleaned$station
nrow(attenu)
nrow(attenu_cleaned)
a <- table(na_boolean_mask)
a[names(a) == FALSE]
?boxplot
histogram(iris$Petal.Length)
hist(iris$Petal.Length)
View(iris)
View(iris)
unique(iris[c("Sepal.Length")])
unique(iris[c("species")])
View(iris)
View(iris)
unique(iris[c("Species")])
unique(iris[c("Species")])
species <- c("setosa", "versicolor", "virginica")
boxplot(iris$Sepal.Length, subset = species)
boxplot(iris$Sepal.Length, subset = iris$Species)
boxplot(iris$Sepal.Length, subset = iris$Species)
boxplot(iris$Sepal.Length ~ iris$Species)
View(iris)
View(iris)
mean(iris$Sepal.Length)
mean(iris$Petal.Length)
mean(iris$Sepal.Length)
mean(iris$Petal.Length)
print(cor.test(x, y))
x = iris$Sepal.Length
y = iris$Petal.Length
print(cor.test(x, y))
?plot
?plot
?plot
?plot
write.csv(attenu_cleaned, "/Users/brandonye/Desktop")
write.csv(attenu_cleaned, "/Users/brandonye/Desktop/attenu_cleaned.csv")
x = iris$Sepal.Length
y = iris$Petal.Length
x_mean <- mean(iris$Sepal.Length)
y_mean <- mean(iris$Petal.Length)
colors <- c("red", "blue", "green", "yellow")
print(cor.test(x, y))
factored_colors <- factor(colors)
plot(x, y, col = factored_colors)
View(iris)
View(iris)
100 %in% c(10, 100, 1000, 10000) ## is present in a vector/list
"blue" %in% c("yellow", "red", "blue") &! "happy" %in% c("sad", "angry")
x = iris$Sepal.Length
y = iris$Petal.Length
x_mean <- mean(iris$Sepal.Length)
y_mean <- mean(iris$Petal.Length)
colors <- c("red", "blue", "green", "black")
for (i in 1:nrow(iris)) {
if (x > x_mean && y > y_mean) {
colors == "red"
} else if (x > x_mean && y < y_mean) {
colors == "blue"
} else if (x < x_mean && y < y_mean) {
colors == "green"
} else {
colors == "yellow"
}
}
print(cor.test(iris$Sepal.Length, iris$Petal.Length))
factored_colors <- factor(colors)
plot(iris$Sepal.Length, iris$Petal.Length, col = factored_colors)
?pairs
View(iris)
View(iris)
pairs(iris [, 1:4], col = species)
pairs(iris [, 1:4], col = iris$species)
pairs(iris [, 1:2], col = iris$species)
pairs(iris[, 1:4], col = iris$species)
pairs(iris[, 1:4])
pairs(iris[, 1:4], col=1:length(iris$Species), pch=1)
pairs(iris[, 1:4], col=iris$Species, pch=1)
pairs(iris[, 1:4], col=iris$Species, pch=1)
legend("bottomright", fill = unique(iris$Species), legend = c(levels(iris$Species)))
par(xpd = TRUE)
legend("bottomright", fill = unique(iris$Species), legend = c(levels(iris$Species)))
pairs(iris[, 1:4], col=iris$Species, pch=1)
par(xpd = TRUE)
legend("bottomright", fill = unique(iris$Species), legend = c(levels(iris$Species)))
?legend
pairs(iris[, 1:4], col=iris$Species, pch=1)
legend(500, 0, fill = unique(iris$Species), legend = c(levels(iris$Species)))
pairs(iris[, 1:4], col=iris$Species, pch=1)
legend(10, 0, fill = unique(iris$Species), legend = c(levels(iris$Species)))
pairs(iris[, 1:4], col=iris$Species, pch=1)
legend(1, 0, fill = unique(iris$Species), legend = c(levels(iris$Species)))
pairs(iris[, 1:4], col=iris$Species, pch=1)
legend(1, fill = unique(iris$Species), legend = c(levels(iris$Species)))
legend("bottomright", fill = unique(iris$Species), legend = c(levels(iris$Species)))
pairs(iris[, 1:4], col=iris$Species, pch=1)
legend("bottomright", fill = unique(iris$Species), legend = c(levels(iris$Species)))
pairs(iris[, 1:4], col=iris$Species, pch=1)
legend(fill = unique(iris$Species), legend = c(levels(iris$Species)), inset=c(0, -.15))
pairs(iris[, 1:4], col=iris$Species, pch=1)
legend(fill = unique(iris$Species), legend = c(levels(iris$Species)), inset=c(0, -.01))
pairs(iris[, 1:4], col=iris$Species, pch=1)
legend(fill = unique(iris$Species), legend = c(levels(iris$Species)), inset=c(0, -.01))
pairs(iris[, 1:4], col=iris$Species, pch=1)
legend(fill = unique(iris$Species), legend = c(levels(iris$Species)), inset=c(0, -.01))
x_mean <- mean(iris$Sepal.Length)
y_mean <- mean(iris$Petal.Length)
colors <- c()
for (row in 1:nrow(iris)) {
if (iris[row, "Sepal.Length"] > x_mean && iris[row, "Petal Length"] > y_mean) {
colors <- append("red")
} else if (iris[row, "Sepal.Length"] > x_mean && iris[row, "Petal Length"] < y_mean) {
colors <- append("blue")
} else if (iris[row, "Sepal.Length"] < x_mean && iris[row, "Petal Length"] < y_mean) {
colors <- append("green")
} else {
colors <- append("yellow")
}
}
x_mean <- mean(iris$Sepal.Length)
y_mean <- mean(iris$Petal.Length)
colors <- c()
for (row in 1:nrow(iris)) {
x = iris[row, "Sepal.Length"]
y = iris[row, "Petal Length"]
if (x > x_mean && y > y_mean) {
colors <- append("red")
} else if (x > x_mean && y < y_mean) {
colors <- append("blue")
} else if (x < x_mean && y < y_mean) {
colors <- append("green")
} else {
colors <- append("yellow")
}
}
x_mean <- mean(iris$Sepal.Length)
y_mean <- mean(iris$Petal.Length)
colors <- c()
for (row in 2:nrow(iris)) {
x = iris[row, "Sepal.Length"]
y = iris[row, "Petal Length"]
if (x > x_mean && y > y_mean) {
colors <- append("red")
} else if (x > x_mean && y < y_mean) {
colors <- append("blue")
} else if (x < x_mean && y < y_mean) {
colors <- append("green")
} else {
colors <- append("yellow")
}
}
x_mean <- mean(iris$Sepal.Length)
y_mean <- mean(iris$Petal.Length)
colors <- c()
for (row in 2:nrow(iris)) {
x = iris[row, "Sepal.Length"]
y = iris[row, "Petal Length"]
if (x > x_mean && y > y_mean) {
colors <- append("red")
} else if (x > x_mean && y < y_mean) {
colors <- append("blue")
} else if (x < x_mean && y < y_mean) {
colors <- append("green")
} else {
colors <- append("yellow")
}
}
View(iris)
View(iris)
```{r}
```{r}
# write code here
x_mean <- mean(iris$Sepal.Length)
y_mean <- mean(iris$Petal.Length)
colors <- c()
for (row in 1:nrow(iris)) {
x = iris[row, "Sepal.Length"]
y = iris[row, "Petal.Length"]
if (x > x_mean && y > y_mean) {
colors <- append("red")
} else if (x > x_mean && y < y_mean) {
colors <- append("blue")
} else if (x < x_mean && y < y_mean) {
colors <- append("green")
} else {
colors <- append("yellow")
}
}
x_mean <- mean(iris$Sepal.Length)
y_mean <- mean(iris$Petal.Length)
colors <- character()
for (row in 1:nrow(iris)) {
x = iris[row, "Sepal.Length"]
y = iris[row, "Petal.Length"]
if (x > x_mean && y > y_mean) {
colors <- append("red")
} else if (x > x_mean && y < y_mean) {
colors <- append("blue")
} else if (x < x_mean && y < y_mean) {
colors <- append("green")
} else {
colors <- append("yellow")
}
}
x_mean <- mean(iris$Sepal.Length)
y_mean <- mean(iris$Petal.Length)
colors <- c()
for (row in 1:nrow(iris)) {
x = iris[row, "Sepal.Length"]
y = iris[row, "Petal.Length"]
if (x > x_mean && y > y_mean) {
colors <- append("red")
} else if (x > x_mean && y < y_mean) {
colors <- append("blue")
} else if (x < x_mean && y < y_mean) {
colors <- append("green")
} else {
colors <- append("yellow")
}
}
x_mean <- mean(iris$Sepal.Length)
y_mean <- mean(iris$Petal.Length)
colors <- c()
for (row in 1:nrow(iris)) {
x = iris[row, "Sepal.Length"]
y = iris[row, "Petal.Length"]
if (x > x_mean && y > y_mean) {
colors <- append("red")
} else if (x > x_mean && y < y_mean) {
colors <- append("blue")
} else if (x < x_mean && y < y_mean) {
colors <- append("green")
} else {
colors <- append("yellow")
}
}
View(iris)
View(iris)
# write code here
x_mean <- mean(iris$Sepal.Length)
y_mean <- mean(iris$Petal.Length)
colors <- c("red")
for (row in 2:nrow(iris)) {
x = iris[row, "Sepal.Length"]
y = iris[row, "Petal.Length"]
if (x > x_mean && y > y_mean) {
colors <- append("red")
} else if (x > x_mean && y < y_mean) {
colors <- append("blue")
} else if (x < x_mean && y < y_mean) {
colors <- append("green")
} else {
colors <- append("yellow")
}
}
x_mean <- mean(iris$Sepal.Length)
y_mean <- mean(iris$Petal.Length)
colors <- c()
for (row in 1:nrow(iris)) {
x = iris[row, "Sepal.Length"]
y = iris[row, "Petal.Length"]
if (x > x_mean && y > y_mean) {
c(colors, "red")
} else if (x > x_mean && y < y_mean) {
c(colors, "blue")
} else if (x < x_mean && y < y_mean) {
c(colors, "green")
} else {
c(colors, "black")
}
}
print(cor.test(iris$Sepal.Length, iris$Petal.Length))
factored_colors <- factor(colors)
plot(iris$Sepal.Length, iris$Petal.Length, col = factored_colors)
View(iris)
x_mean <- mean(iris$Sepal.Length)
y_mean <- mean(iris$Petal.Length)
colors <- c()
for (row in 1:nrow(iris)) {
x = iris[row, "Sepal.Length"]
y = iris[row, "Petal.Length"]
if (x > x_mean && y > y_mean) {
colors <- c(colors, "red")
} else if (x > x_mean && y < y_mean) {
colors <- c(colors, "blue")
} else if (x < x_mean && y < y_mean) {
colors <- c(colors, "green")
} else {
colors <- c(colors, "black")
}
}
print(cor.test(iris$Sepal.Length, iris$Petal.Length))
factored_colors <- factor(colors)
plot(iris$Sepal.Length, iris$Petal.Length, col = factored_colors)
x_mean <- mean(iris$Sepal.Length)
y_mean <- mean(iris$Petal.Length)
colors <- c()
for (row in 1:nrow(iris)) {
x = iris[row, "Sepal.Length"]
y = iris[row, "Petal.Length"]
if (x > x_mean && y > y_mean) {
colors <- c(colors, "red")
} else if (x > x_mean && y < y_mean) {
colors <- c(colors, "blue")
} else if (x < x_mean && y < y_mean) {
colors <- c(colors, "green")
} else {
colors <- c(colors, "magenta")
}
}
print(cor.test(iris$Sepal.Length, iris$Petal.Length))
factored_colors <- factor(colors)
plot(iris$Sepal.Length, iris$Petal.Length, col = factored_colors)
x_mean <- mean(iris$Sepal.Length)
y_mean <- mean(iris$Petal.Length)
colors <- c()
for (row in 1:nrow(iris)) {
x = iris[row, "Sepal.Length"]
y = iris[row, "Petal.Length"]
if (x > x_mean && y > y_mean) {
colors <- c(colors, "red")
} else if (x > x_mean && y < y_mean) {
colors <- c(colors, "blue")
} else if (x < x_mean && y < y_mean) {
colors <- c(colors, "green")
} else {
colors <- c(colors, "yellow")
}
}
print(cor.test(iris$Sepal.Length, iris$Petal.Length))
factored_colors <- factor(colors)
plot(iris$Sepal.Length, iris$Petal.Length, col = factored_colors)
head(colors)
show(colors)
legend(fill = unique(iris$Species), legend = c(levels(iris$Species)))
pairs(iris[, 1:4], col=iris$Species, pch=1)
legend(fill = unique(iris$Species), legend = c(levels(iris$Species)))
legend(iris, fill = unique(iris$Species), legend = c(levels(iris$Species)))
pairs(iris[, 1:4], col=iris$Species, pch=1)
?abline
plot(iris$Sepal.Length, iris$Petal.Length, col = factored_colors)
abline(v = x_mean)
abline(h = y_mean)
?plot
# write code here
x_mean <- mean(iris$Sepal.Length)
y_mean <- mean(iris$Petal.Length)
colors <- c()
for (row in 1:nrow(iris)) {
x = iris[row, "Sepal.Length"]
y = iris[row, "Petal.Length"]
if (x > x_mean && y > y_mean) {
colors <- c(colors, "red")
} else if (x > x_mean && y < y_mean) {
colors <- c(colors, "blue")
} else if (x < x_mean && y < y_mean) {
colors <- c(colors, "green")
} else {
colors <- c(colors, "yellow")
}
}
print(cor.test(iris$Sepal.Length, iris$Petal.Length))
factored_colors <- factor(colors)
palette(c("red", "blue", "green", "yellow"))
plot(iris$Sepal.Length, iris$Petal.Length, col = factored_colors)
abline(v = x_mean)
abline(h = y_mean)
jpg("/Users/brandonye/Desktop/histplot.jpg")
?jpg
??jpg
jpeg("/Users/brandonye/Desktop/histplot.jpg")
hist(iris$Petal.Length)
dev.off()
pairs(iris[, 1:4], col=iris$Species, pch=1)
legend(fill = unique(iris$Species), legend = c(levels(iris$Species)))
pairs(iris[, 1:4], col=iris$Species, oma=c(3,3,3,15), pch=1)
legend("bottomright", fill = unique(iris$Species), legend = c( levels(iris$Species)))
pairs(iris[, 1:4], col=iris$Species, oma=c(3,3,3,15), pch=1)
par(xpd = TRUE)
legend("bottomright", fill = unique(iris$Species), legend = c( levels(iris$Species)))
?par
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.15")
library(BiocManager)
if (!require("TCGAbiolinks", quietly = TRUE))
BiocManager::install("TCGAbiolinks") # notice this is different from the typical "install.packages" command. that's because BiocManager is necessary to install and manage packages from the Bioconductor project
library(TCGAbiolinks)
